package com.jianglong.dynamicAndGreddyAL;

import java.util.Arrays;

/*动态规划进阶版2：序列类动态规划*/
public class dynamicSeniorAL2 {
    /*最长上升子序列*/
    /*给定一个无序的整数数组，找到其中最长上升子序列的长度。(说明：子序列不同于子数组，不需要是一个连续区间，只需要不打乱先后顺序即可)*/
    /*例如，输入: [10,9,2,5,3,7,101,18]
            输出: 4
            解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
    * */
    /*动态规划题目解析：
     * 问题拆解：我们要求解的问题是 “数组中最长递增子序列”，一个子序列虽然不是连续的区间，但是它依然有起点和终点，比如：
                [10,9,2,5,3,7,101,18]
                子序列 [2,3,7,18] 的起始位置是 2，终止位置是 18
                子序列 [5,7,101] 的起始位置是 5，终止位置是 101
                如果我们确定终点位置，然后去看前面 i - 1 个位置中，哪一个位置可以和当前位置拼接在一起，这样就可以把第 i 个问题拆解成思考之前 i - 1 个问题。
     * 状态定义：问题拆解中我们提到 “第 i 个问题和前 i - 1 个问题有关”，也就是说 “如果我们要求解第 i 个问题的解，那么我们必须考虑前 i - 1 个问题的解”，
     *          我们定义 dp[i] 表示以位置 i 结尾的子序列的最大长度，也就是说 dp[i] 里面记录的答案保证了该答案表示的子序列以位置 i 结尾。
     * 递推方程：对于 i 这个位置，我们需要考虑前 i - 1 个位置，看看哪些位置可以拼在 i 位置之前，如果有多个位置可以拼在 i 之前，那么必须选最长的那个，这样一分析，递推方程就有了：
                dp[i] = Math.max(dp[j],...,dp[k]) + 1,
                其中 inputArray[j] < inputArray[i], inputArray[k] < inputArray[i]
     * 实现：在实现这里，我们需要考虑状态数组的初始化，因为对于每个位置，它本身其实就是一个序列，因此所有位置的状态都可以初始化为 1。
     * */
    public int longestSubList(int[] array){
        if(array==null||array.length==0) return 0;
        int len=array.length;
        int[] dp=new int[len];
        Arrays.fill(dp,1);
        int max=0;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < i; j++) {
                if(array[j]<array[i])
                    dp[i]=Math.max(dp[j]+1,dp[i]);//从第一位开始，每一位对应的状态值与当前位置状态值比较，若更大，则更新当前位置状态值
            }
            max=Math.max(max,dp[i]);
        }
        return max;
    }

    /*粉刷房子*/
    /*假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。
      当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的矩阵来表示的。
      例如，costs[0][0]表示第 0 号房子粉刷成红色的成本花费；costs[1][2]表示第 1 号房子粉刷成绿色的花费，以此类推。请你计算出粉刷完所有房子最少的花费成本。*/
    /*例如，输入: [[17,2,17],[16,16,5],[14,3,19]]
            输出: 10
            解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。
            最少花费: 2 + 5 + 3 = 10。
    * */
    /*动态规划题目解析：
     * 问题拆解：对于每个房子来说，都可以使用三种油漆当中的一种，如果说不需要保证相邻的房子的颜色必须不同，那么整个题目会变得非常简单，每个房子直接用最便宜的油漆刷就好了，
     *          但是加上这个限制条件，你会发现刷第 i 个房子的花费其实是和前面 i - 1 个房子的花费以及选择相关，如果说我们需要知道第 i 个房子使用第 k 种油漆的最小花费，
     *          那么你其实可以思考第 i - 1 个房子如果不用该油漆的最小花费，这个最小花费是考虑从 0 到当前位置所有的房子的。
     * 状态定义：通过之前的问题拆解步骤，状态可以定义成 dp[i][k]，表示如果第 i 个房子选择第 k 个颜色，那么从 0 到 i 个房子的最小花费。
     * 递推方程：对于 i 这个位置，我们需要考虑前 i - 1 个位置，看看哪些位置可以拼在 i 位置之前，如果有多个位置可以拼在 i 之前，那么必须选最长的那个，这样一分析，递推方程就有了：
                dp[i] = Math.max(dp[j],...,dp[k]) + 1,
                其中 inputArray[j] < inputArray[i], inputArray[k] < inputArray[i]
     * 实现：因为我们要考虑 i - 1 的情况，但是第 0 个房子并不存在 i - 1 的情况，因此我们可以把第 0 个房子的最小花费存在状态数组中
     * */
    public int minCost(int[][] costs){
        if(costs==null||costs.length==0) return 0;
        int n=costs.length;
        int[][] dp=new int[n][3];

        for (int i = 0; i < costs[0].length; i++) {
            dp[0][i]=costs[0][i];
        }

        for (int i = 1; i < n; i++) {
            dp[i][0]=Math.min(dp[i-1][1],dp[i-1][2])+costs[i][0];
            dp[i][1]=Math.min(dp[i-1][0],dp[i-1][2])+costs[i][1];
            dp[i][2]=Math.min(dp[i-1][0],dp[i-1][1])+costs[i][2];
        }

        return Math.min(dp[n-1][0],Math.min(dp[n-1][1],dp[n-1][2]));
    }

    /*打家劫舍*/
    /*你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
      给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。*/
    /*例如，输入: [1,2,3,1]
            输出: 4
            解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
            偷窃到的最高金额 = 1 + 3 = 4 。
    * */
    /*动态规划题目解析：
     * 问题拆解：如果我们要求解抢完 n 个房子所获得的最大收入，因为题目的要求，我们可以思考第 i 个房子是否应该抢，如果要抢，那么第 i - 1 个房子就不能抢，我们只能考虑抢第 i - 2 个房子。
     *          如果不抢，那么就可以抢第 i - 1 个房子，这样一来，第 i 个房子就和第 i - 1 个房子，以及第 i - 2 个房子联系上了。
     * 状态定义：通过之前的问题拆解，我们知道，如果我们从左到右去抢房子，抢到当前房子可以获得的最大值其实是和抢到前两个房子可以获得的最大值有关，因此我们可以用 dp[i] 表示抢到第 i 个房子可以获得的最大值
     * 递推方程：如果我们抢第 i 个房子，那么我们就只能去考虑第 i - 2 个房子，如果不抢，那么我们可以考虑第 i - 1 个房子，于是递推方程就有了：
                dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1])
     * 实现：因为第 i 个位置和前面的两个位置都有关，这个时候我们可以把状态多开一格，dp[0] 表示的是一个房子都不抢的状态，dp[1] 就是最左边的房子获得的最大价值，这个房子之前也没有其他的房子，直接抢即可
     * */
    public int maxReward(int[] moneyArr){
        if(moneyArr==null||moneyArr.length==0) return 0;
        int len=moneyArr.length;
        int[] dp=new int[len+1];
        dp[0]=0;dp[1]=moneyArr[0];

        for (int i = 2; i < len+1; i++) {
            dp[i]=Math.max(dp[i-2]+moneyArr[i-1],dp[i-1]);
        }
        return dp[len];
    }
}
